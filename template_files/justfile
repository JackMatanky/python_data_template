# -----------------------------------------------------------------------------
# File: geo-data/justfile
# GitHub: https://github.com/casey/just
# Docs: https://just.systems/man/en
# Description: Task runner for project setup, Jupytext sync, linting, testing,
#              virtual environment activation, and script execution.
# -----------------------------------------------------------------------------
# Set Bash as default shell and Powershell for Windows

set shell := ["bash", "-cu"]
set windows-shell := ["powershell", "-Command"]

# ------------------------------------------------------------ #
#                Environment Variables And Paths               #
# ------------------------------------------------------------ #

# ------------------ OS and Shell Detection ------------------ #
OS := os_family()
SHELL_NAME := if OS == "windows" { "powershell" } else { `basename "$SHELL"` }
TERMINAL := if OS == "windows" { "powershell" } else { `ps -o comm= -p $(ps -o ppid= -p $(ps -o ppid= -p $$)) | xargs basename` }


# ----------------------- Project Paths ---------------------- #
PROJECT_DIR := invocation_directory()
VENV_DIR := PROJECT_DIR / ".venv"
DATA_DIR := PROJECT_DIR / "data"
SRC_DIR := PROJECT_DIR / "src"
DOCS_DIR := PROJECT_DIR / "docs"
DOCS_SCRIPTS_DIR := DOCS_DIR / "scripts"
NOTEBOOK_DIR := PROJECT_DIR / "notebooks"
IPYNB_PATH := join(NOTEBOOK_DIR, "**/*.ipynb")

# SCRIPT_DIR := PROJECT_DIR / "_scripts"
# PY_PATH := SCRIPT_DIR / "**/*.py"


# --------- Python Virtual Environment Configuration --------- #
PYTHON_DIR := join(".venv", if OS == "windows" { "Scripts" } else { "bin" })
PYTHON := join(PYTHON_DIR, if OS == "windows" { "python.exe" } else { "python3" })
VENV_ACTIVATE_PATH := if TERMINAL == "nu" { join(PYTHON_DIR, "activate.nu") } else if TERMINAL == "fish" { join(PYTHON_DIR, "activate.fish") } else { join(PYTHON_DIR, "activate") }
VENV_ACTIVATE_COMMAND := if TERMINAL == "nu" { "use " + VENV_ACTIVATE_PATH } else { "source " + VENV_ACTIVATE_PATH }

# ------------------------------------------------------------ #
#                         Default Task                         #
# ------------------------------------------------------------ #

# Display a list of available tasks
default:
    @echo "üìã Available tasks:"
    @just --list --unsorted

# ------------------------------------------------------------ #
#                Environment Detection Utilities               #
# ------------------------------------------------------------ #

# Show the process tree of the current terminal
[group("Environment Utils")]
show-terminal-tree:
    pid=$$; \
    level=0; \
    while [ "$$pid" -gt 1 ]; do \
    name=$$(ps -o comm= -p "$$pid" | xargs basename); \
    printf "Level %d: %s (pid: %s)\n" "$$level" "$$name" "$$pid"; \
    pid=$$(ps -o ppid= -p "$$pid" | tr -d ' '); \
    level=$$((level + 1)); \
    done

# Print the detected terminal emulator
[group("Environment Utils")]
detect-terminal:
    @echo "Detected terminal emulator: {{ TERMINAL }}"

# Print the detected shell
[group("Environment Utils")]
detect-shell:
    @echo "Detected shell: {{ SHELL_NAME }}"

# ------------------------------------------------------------ #
#                Virtual Environment Management                #
# ------------------------------------------------------------ #

# Create a Python virtual environment using pyenv + uv
[group("Virtual Environment")]
create_venv:
    @echo "üêç Creating .venv with pyenv + uv..."
    @uv venv --python "$(pyenv which python)"

# Create a Python virtual environment if it doesn't exist
[group("Virtual Environment")]
u-venv:
    [ -d .venv ] || just create_venv

# Initialize virtual environment using direnv + layout_uv
[group("Virtual Environment")]
venv:
    @echo "üîß Initializing virtual environment via direnv + layout_uv..."
    if [ ! -f .envrc ]; then
        echo "‚öôÔ∏è  Creating .envrc with layout_uv..."
        echo 'layout_uv' > .envrc
    else
        echo "üìÑ Found existing .envrc"
    fi
    @direnv allow
    @echo "‚úÖ direnv allowed ‚Äî .venv will be created automatically if missing"

# Print the activation path for the current shell
[group("Virtual Environment")]
activate-path:
    @echo "{{ VENV_ACTIVATE_PATH }}"

# Copy the virtual environment activation command to the clipboard
[group("Virtual Environment")]
activate:
    @echo "{{ VENV_ACTIVATE_COMMAND }}"
    @if [ "{{ OS }}" == "unix" ]; then \
        echo "{{ VENV_ACTIVATE_COMMAND }}" | pbcopy; \
    else \
        echo "{{ VENV_ACTIVATE_COMMAND }}" | clip; \
    fi
    @echo "‚úÖ Activation command copied to clipboard (if supported)"
    @echo "üìã Paste the command in your shell (Ctrl+V or right-click)"

# ------------------------------------------------------------ #
#                         Project Setup                        #
# ------------------------------------------------------------ #

# Installs only the core dependencies from pyproject.toml in editable mode
[group("Setup")]
setup-core:
    uv pip install -e .

# Installs the optional dev dependencies (e.g., linters, type checkers, test tools)
[group("Setup")]
setup-dev:
    uv pip install -e .[dev]

# Installs the optional docs dependencies (e.g., graphviz, erdantic)
[group("Setup")]
setup-docs:
    uv pip install -e .[docs]

# Installs all optional dependency groups (dev + docs)
[group("Setup")]
setup-all:
    uv pip install -e .[dev,docs]

# Installs pre-commit if not available and sets up Git hooks
[group("Setup")]
setup-pre-commit:
    command -v pre-commit >/dev/null || uv pip install pre-commit
    pre-commit install

# Full environment setup: installs all dependencies and sets up Git hooks

# Initialize the environment: venv, tools, and hooks
[group("Setup")]
init:
    just venv
    just setup-all
    just setup-pre-commit
    @echo "‚úÖ Virtual environment initialized with dependencies and Git hooks."

# ------------------------------------------------------------ #
#                          Tool Checks                         #
# ------------------------------------------------------------ #

# Check if Ruff is installed
[group("Tool Checks")]
check-ruff:
    command -v ruff >/dev/null || (echo "‚ùå Ruff not found. Run 'just install-ruff' to fix." && exit 1)

# Banner for Ruff installation failure
[group("Tool Checks")]
install_ruff_fail_banner:
    echo "‚ùå Failed to install Ruff via pyproject.toml requirements."
    echo "üëâ Install Ruff manually with one of the following:"
    echo "Homebrew: brew install ruff"
    echo "uv: uv pip install ruff --dev"

# Try to install Ruff if missing, otherwise guide user
[group("Tool Checks")]
install-ruff:
    @echo "üöÄ Attempting to install Ruff from pyproject.toml..."
    just setup-dev || just install_ruff_fail_banner

# ------------------------------------------------------------ #
#                   Code Quality And Linting                   #
# ------------------------------------------------------------ #

# Run Ruff linter over source and notebook code
[group("Code Quality")]
lint:
    ruff check src tests notebooks

# Format code using Ruff's auto-fixer
[group("Code Quality")]
format:
    ruff format src tests notebooks

# Run both linting and formatting steps
[group("Code Quality")]
check:
    just lint
    just format

# Run all configured pre-commit hooks manually
[group("Code Quality")]
run-pre-commit:
    pre-commit run --all-files

# ------------------------------------------------------------ #
#                            Testing                           #
# ------------------------------------------------------------ #

# Run all tests using pytest
[group("Testing")]
test:
    pytest tests

# Run tests and display a coverage report
[group("Testing")]
coverage:
    coverage run -m pytest
    coverage report
    coverage html

# ------------------------------------------------------------ #
#                         Type Checking                        #
# ------------------------------------------------------------ #

# Type-check using BasedPyright
[group("Type Checking")]
typecheck-basedpyright:
    basedpyright

# Type-check using Pylyzer
[group("Type Checking")]
typecheck-pylyzer:
    pylyzer src

# ------------------------------------------------------------ #
#                     Jupytext Integration                     #
# ------------------------------------------------------------ #

# Jupytext pairing format
JUPYTEXT_FORMAT := "--set-formats ipynb,/_scripts//py:percent"

# Pair .ipynb notebooks with .py scripts
[group("Jupytext")]
nb-pair:
    jupytext {{ JUPYTEXT_FORMAT }} {{ IPYNB_PATH }}

# Sync notebooks to scripts recursively
[group("Jupytext")]
[unix]
nb-sync:
    jupytext --sync {{ IPYNB_PATH }}

#    /opt/homebrew/bin/bash -c 'shopt -s globstar && jupytext --sync {{ JUPYTEXT_FORMAT }} {{ NOTEBOOK_DIR }}/**/*.ipynb'

# Sync scripts back to notebooks recursively
[group("Jupytext")]
[unix]
nb-sync-py:
    /opt/homebrew/bin/bash -c 'shopt -s globstar && jupytext --sync {{ JUPYTEXT_FORMAT }} ../_scripts/**/*.py'

# Sync notebooks to scripts recursively
[group("Jupytext")]
[windows]
nb-sync:
    powershell -Command "Get-ChildItem -Recurse -Filter *.ipynb -Path '{{ NOTEBOOK_DIR }}' | ForEach-Object { jupytext --sync {{ JUPYTEXT_FORMAT }} $_.FullName }"

# Sync scripts back to notebooks recursively
[group("Jupytext")]
[windows]
nb-sync-py:
    powershell -Command "Get-ChildItem -Recurse -Filter *.py -Path '../_scripts' | ForEach-Object { jupytext --sync {{ JUPYTEXT_FORMAT }} $_.FullName }"

# Launch Jupyter Notebook interface in the notebook directory
[group("Jupytext")]
notebook:
    jupyter notebook {{ NOTEBOOK_DIR }}/

# Export notebooks to HTML format
[group("Jupytext")]
nb-export-html:
    jupyter nbconvert --to html {{ NOTEBOOK_DIR }}/*.ipynb

# Export notebooks to Markdown format
[group("Jupytext")]
nb-export-md:
    jupyter nbconvert --to markdown {{ NOTEBOOK_DIR }}/*.ipynb

# ------------------------------------------------------------ #
#                         Documentation                        #
# ------------------------------------------------------------ #

# Generate entity-relationship diagrams (ERDs) from all Pydantic models
[group("Documentation")]
render-erds:
    @echo "üìä Generating entity-relationship diagrams from Pydantic models..."
    @echo "üìÅ Source Directory: {{ SRC_DIR }}"
    @echo "üìÇ Output Directory: {{ DOCS_DIR }}/assets"
    @{{ PYTHON }} {{ DOCS_SCRIPTS_DIR }}/render_erds.py
    @echo "‚úÖ ERD generation complete."

# Generate Markdown documentation using pdoc
[group("Documentation")]
render-docs:
    @echo "üìò Generating Markdown documentation with pdoc..."
    @{{ PYTHON }} {{ DOCS_SCRIPTS_DIR }}/render_docs.py

# Generate Markdown documentation using pydoc-markdown
[group("Documentation")]
render-pydoc:
    @echo "üìò Generating Markdown documentation with pydoc-markdown..."
    @pydoc-markdown
    @echo "‚úÖ Markdown files saved to: {{ DOCS_DIR }}/generated"

# Generate ERD's and Markdown documentation
[group("Documentation")]
generate-docs:
    just render-erds
    just render-docs

# ------------------------------------------------------------ #
#                       Script Execution                       #
# ------------------------------------------------------------ #

# Launch Python REPL with PYTHONPATH including src/
[group("Execution")]
repl-src:
    @echo "üêç Starting REPL with PYTHONPATH=./src"
    PYTHONPATH=./src {{ PYTHON }}

# Run the main application script
[group("Execution")]
run:
    {{ PYTHON }} src/main.py

# Run the command-line interface script
[group("Execution")]
cli:
    {{ PYTHON }} src/cli.py

# Run the data processing pipeline script
[group("Execution")]
data-pipeline:
    {{ PYTHON }} scripts/process_data.py

# ------------------------------------------------------------ #
#                    Cleanup And Maintenance                   #
# ------------------------------------------------------------ #

# Remove virtual environment and common Python cache files
[group("Maintenance")]
clean:
    rm -rf .venv __pycache__ .ruff_cache .pytest_cache .mypy_cache .ipynb_checkpoints

# Rebuild the environment from scratch
[group("Maintenance")]
rebuild:
    just clean
    just init

# Display environment info and Python paths
[group("Maintenance")]
check-env:
    {{ PYTHON }} --version
    which {{ PYTHON }}
    echo "Venv Path: {{ PYTHON_DIR }}"
    echo "Activate Path: {{ VENV_ACTIVATE_PATH }}"

# Purge all caches and environment artifacts
[group("Maintenance")]
purge:
    just clean
    rm -rf build/ dist/ *.egg-info/ .coverage coverage_html_report/
