# -----------------------------------------------------------------------------
# File: ${PROJECT_PATH}/pyproject.toml
# Description: Project metadata and dependencies (PEP 621 format)
# Reference: https://peps.python.org/pep-0621/
# Specifications: https://packaging.python.org/en/latest/specifications/pyproject-toml/
# -----------------------------------------------------------------------------

# >>> Project Metadata <<<
[project]
name = "${PROJECT_NAME}"
description = "${DESCRIPTION}"
authors = [{ name = "${AUTHOR_NAME}", email = "<your@email.com>" }]
version â€” "0.1.0"
requires-python = ">=${PYTHON_VERSION}"

# >>> Runtime Dependencies <<<
# Libraries and packages needed to run the project
# Installed via `uv pip install`
dependencies = [
    "pre-commit>=4.2.0",
    "ruff>=0.11.4",
    "ipykernel>=6.29.5",
    "jupytext>=1.17.0",
    "pathlib>=1.0.1",
    "requests",

    "pandas",
    "numpy",
    "matplotlib",
    ${DS_DEPENDENCIES}
]

# --- Dependency Groups ---
# Mechanism for storing package requirements excluded from the main build metadata
# Source: https://packaging.python.org/en/latest/specifications/dependency-groups/
# Unavailable when using setuptools
# See: https://setuptools.pypa.io/en/latest/userguide/dependency_management.html
# [dependency-groups]
# docs = ["graphviz>=0.20.3", "erdantic>=1.1.0.post1"]

# --- Optional Dependencies ---
# Source: https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#dependencies-and-requirements
[project.optional-dependencies]
docs = ["graphviz>=0.20.3", "erdantic>=1.1.0.post1"]

# >>> Setuptools Backend Options <<<
# Source: https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
# (Optional) Top-level setuptools configuration.
# Uncomment only if you need settings like `zip-safe` or legacy behavior.
# [tool.setuptools]
# zip-safe = false

# --- Package Directory Mapping ---
# Maps the root namespace to the `src/` directory (required for src layout).
[tool.setuptools.package-dir]
"" = "src"

# --- Package Discovery Settings ---
# Tells setuptools to search for packages inside the `src/` directory.
[tool.setuptools.packages.find]
where = ["src"]

# >>> Build Backend <<<
# Specify the backend used to build the project
[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"


# ---------------------------------------------------------
# Description: Configuration for Jupytext notebook pairing
# JupyText Docs: https://jupytext.readthedocs.io/
# ---------------------------------------------------------
[tool.jupytext]
# >>> Notebook Format Pairing <<<
# Define how Jupytext should pair notebooks with Python scripts.
# This will pair .ipynb notebooks with .py scripts, using the percent format for cell markers.
formats = "ipynb,py:percent"

# Limit notebook pairing to files with the .ipynb extension
notebook_extensions = [".ipynb"]

# >>> Notebook and Cell Metadata <<<
# Exclude unnecessary metadata like widget state and VSCode settings from notebooks
notebook_metadata_filter = "kernelspec,jupytext"

# Keep all cell-level metadata, including tags and parameters used in Jupyter notebooks
cell_metadata_filter = "all"

# >>> Jupyter Notebook Settings <<<
# Read from .ipynb files by default and use Jupytext to convert them to Python
preferred_jupytext_formats_read = "ipynb"

# >>> Jupyter Notebook Formats <<<
# Define the formats for Jupyter notebooks and Python scripts
[tool.jupytext.formats]
"notebooks/" = "ipynb"
"_scripts/" = "py:percent"


# ---------------------------------------------------------
# Description: Configuration for Ruff Linter & Formatter
# Docs: https://docs.astral.sh/ruff/
# ---------------------------------------------------------
[tool.ruff]
# >>> Max Line Length <<<
line-length = 80

# >>> Target Python Version <<<
# Specify the target Python version for parsing the code
target-version = "py310"

# >>> Enable Linting and Formatting <<<
# Enable multiple rule sets for code quality checks
# E = PyCodeStyle, F = PyFlakes, I = Import sorting, B = formatting, UP = unused imports
lint.select = ["E", "F", "I", "B", "UP"]

# >>> Rules to Ignore <<<
# List of linting rules to ignore
lint.ignore = []

# >>> Auto-Fix Issues <<<
# Automatically fix linting issues
# e.g., fixing code formatting or imports
fix = true

# >>> Exclude Folders from Linting <<<
# List of directories and files to exclude from linting
# e.g., virtual environments, data files, models, notebooks, and reports
exclude = [
    "data/",
    "models/",
    "notebooks/",
    "reports/",
    ".venv/",
    "__pycache__/",
]

# >>> Import Sorting <<<
[tool.ruff.lint.isort]
# Mark "src" as a first-party package for import sorting
known-first-party = ["src"]
combine-as-imports = true
force-sort-within-sections = true


# ---------------------------------------------------------
# Pydoc-Markdown
# https://pydoc-markdown.readthedocs.io/en/latest/config/
# ---------------------------------------------------------
[tool.pydoc-markdown]
# The Python modules you want to load from your source directory
loaders = [
  { type = "python", search_path = ["src"] }
]

[tool.pydoc-markdown.renderer]
type = "mkdocs"
output_directory = "docs"

[[tool.pydoc-markdown.renderer.pages]]
title = "API Documentation"
name = "index"
contents = ["geo_entities", "shared", "geo_utils", "person_entities"]


# ---------------------------------------------------------
# Pylyzer - Standalone Static Type Checker
# https://mtshiba.github.io/pylyzer/
# ---------------------------------------------------------
[tool.pylyzer.python]
path = ".venv/bin/python"  # Set to your virtualenv Python interpreter

# ---------------------------------------------------------
# BasedPyright LSP
# https://github.com/Insertish/basedpyright
# ---------------------------------------------------------
[tool.basedpyright]
# >>> Environment Options <<<
include = ["src"]
exclude = ["**/__pycache__", "src/experimental", "src/typestubs"]

venvPath = "."
venv = ".venv"

pythonVersion = "3.12"
# Specifies the target platform for code execution
# pythonPlatform = "Darwin"

executionEnvironments = [
  { root = "src" }
]

# >>> Type Checking Diagnostics <<<
ignore = ["src/_old"]

defineConstant = { DEBUG = true }
# stubPath = "src/stubs"

# >>> Type Checking Diagnostics <<<
# Suppress overzealous or irrelevant warnings for data workflows
reportAttributeAccessIssue = false       # Allow accessing df.itertuples().field
reportUnknownMemberType = false          # Suppress unknown attributes from libs like pandas
reportUnknownVariableType = false        # Suppress "partially unknown" variable warnings
reportUnknownLambdaType = false          # Suppress "lambda return is unknown"
reportUnnecessaryIsInstance = false      # Allow redundant isinstance checks
reportPrivateImportUsage = false         # Allow accessing 'internal' imports when needed
reportMissingImports = "error"           # Still show errors for missing actual libraries
reportMissingTypeStubs = false           # Allow using libs without stubs (e.g., geopandas)
reportIgnoreCommentWithoutRule = false   # Suppress warnings for @ignore comments without a rule
